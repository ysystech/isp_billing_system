# Generated by Django 5.2.2 on 2025-06-29
from django.db import migrations
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType


def simplify_report_permissions(apps, schema_editor):
    """
    Simplify report permissions from 20 to 11:
    - Keep 9 individual report view permissions
    - Keep 2 dashboard permissions
    - Consolidate all export permissions into one
    - Remove granular statistics and advanced feature permissions
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # First, clean up any duplicate permissions
    duplicate_codenames = [
        'view_ticket_analysis_report', 'view_area_performance_dashboard',
        'view_subscription_expiry_report', 'view_financial_statistics',
        'view_financial_dashboard', 'view_system_statistics',
        'view_daily_collection_report', 'view_monthly_revenue_report',
        'view_customer_statistics', 'view_infrastructure_statistics',
        'view_customer_acquisition_report', 'view_technician_performance_report',
        'view_payment_behavior_report'
    ]
    
    for codename in duplicate_codenames:
        perms = Permission.objects.filter(codename=codename).order_by('id')
        if perms.count() > 1:
            # Keep the first one, delete the rest
            for perm in perms[1:]:
                perm.delete()
    
    # Get the reports content type
    try:
        reports_ct = ContentType.objects.get(app_label='reports', model='report')
    except ContentType.DoesNotExist:
        # Create a dummy content type for reports if it doesn't exist
        reports_ct = ContentType.objects.create(
            app_label='reports',
            model='report'
        )
    
    # Permissions to keep (11 total)
    permissions_to_keep = [
        # Main dashboard
        ('view_reports_dashboard', 'Can view reports dashboard'),
        
        # Individual reports (7)
        ('view_daily_collection_report', 'Can view daily collection report'),
        ('view_subscription_expiry_report', 'Can view subscription expiry report'),
        ('view_monthly_revenue_report', 'Can view monthly revenue report'),
        ('view_ticket_analysis_report', 'Can view ticket analysis report'),        ('view_technician_performance_report', 'Can view technician performance report'),
        ('view_customer_acquisition_report', 'Can view customer acquisition report'),
        ('view_payment_behavior_report', 'Can view payment behavior report'),
        
        # Dashboards (2)
        ('view_area_performance_dashboard', 'Can view area performance dashboard'),
        ('view_financial_dashboard', 'Can view financial dashboard'),
        
        # Single export permission
        ('export_reports', 'Can export reports'),
    ]
    
    # Permissions to remove
    permissions_to_remove = [
        'view_customer_statistics',
        'view_financial_statistics',
        'view_infrastructure_statistics',
        'view_system_statistics',
        'access_advanced_analytics',
        'customize_report_parameters',
        'export_business_reports',
        'export_operational_reports',
        'schedule_reports',
        'view_reports',  # Duplicate of view_reports_dashboard
        'view_active_subscriptions',  # Part of dashboard
    ]
    
    # Create or update the permissions we want to keep
    for codename, name in permissions_to_keep:
        Permission.objects.update_or_create(
            codename=codename,
            content_type=reports_ct,
            defaults={'name': name}
        )
    
    # Delete the permissions we no longer need
    Permission.objects.filter(
        codename__in=permissions_to_remove,
        content_type=reports_ct
    ).delete()


def reverse_simplify_permissions(apps, schema_editor):
    """
    Reverse the simplification - restore all 20 permissions
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    try:
        reports_ct = ContentType.objects.get(app_label='reports', model='report')
    except ContentType.DoesNotExist:
        reports_ct = ContentType.objects.create(
            app_label='reports',            model='report'
        )
    
    # Restore all original permissions
    all_permissions = [
        ('view_reports', 'Can view reports dashboard'),
        ('view_reports_dashboard', 'Can view reports dashboard'),
        ('view_daily_collection_report', 'Can view daily collection report'),
        ('view_subscription_expiry_report', 'Can view subscription expiry report'),
        ('view_monthly_revenue_report', 'Can view monthly revenue report'),
        ('view_ticket_analysis_report', 'Can view ticket analysis report'),
        ('view_technician_performance_report', 'Can view technician performance report'),
        ('view_customer_acquisition_report', 'Can view customer acquisition report'),
        ('view_payment_behavior_report', 'Can view payment behavior report'),
        ('view_area_performance_dashboard', 'Can view area performance dashboard'),
        ('view_financial_dashboard', 'Can view financial dashboard'),
        ('view_active_subscriptions', 'Can view active subscriptions'),
        ('view_customer_statistics', 'Can view customer statistics'),
        ('view_financial_statistics', 'Can view financial statistics'),
        ('view_infrastructure_statistics', 'Can view infrastructure statistics'),
        ('view_system_statistics', 'Can view system statistics'),
        ('access_advanced_analytics', 'Can access advanced analytics'),
        ('customize_report_parameters', 'Can customize report parameters'),
        ('export_business_reports', 'Can export business intelligence reports'),
        ('export_operational_reports', 'Can export operational reports'),
        ('schedule_reports', 'Can schedule automated reports'),
        ('export_reports', 'Can export reports'),
    ]
    
    for codename, name in all_permissions:
        Permission.objects.get_or_create(
            codename=codename,
            content_type=reports_ct,
            defaults={'name': name}
        )


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.RunPython(simplify_report_permissions, reverse_simplify_permissions),
    ]
