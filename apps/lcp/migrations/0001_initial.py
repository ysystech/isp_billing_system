# Generated by Django 5.2.2 on 2025-06-30 00:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('barangays', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NAP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate (e.g., 8.4542363)', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate (e.g., 124.6318977)', max_digits=11, null=True)),
                ('location_accuracy', models.CharField(blank=True, choices=[('exact', 'Exact GPS'), ('approximate', 'Approximate'), ('address', 'From Address'), ('manual', 'Manual Entry')], default='manual', help_text='How the location was determined', max_length=50)),
                ('location_notes', models.CharField(blank=True, help_text='Additional notes about the location (landmark, building, etc.)', max_length=255)),
                ('splitter_port', models.IntegerField(help_text='Which output port on the splitter (1-N)')),
                ('code', models.CharField(help_text='NAP identifier (e.g., NAP-001)', max_length=50)),
                ('name', models.CharField(help_text='Descriptive name for the NAP', max_length=100)),
                ('location', models.TextField(help_text='Physical location of the NAP box')),
                ('port_capacity', models.IntegerField(default=8, help_text='Number of customer ports in this NAP')),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('max_distance_meters', models.IntegerField(default=100, help_text='Maximum recommended customer distance in meters')),
            ],
            options={
                'verbose_name': 'NAP',
                'verbose_name_plural': 'NAPs',
                'ordering': ['splitter__lcp', 'splitter', 'splitter_port'],
                'permissions': [('view_nap_list', 'Can view NAP list'), ('view_nap_detail', 'Can view NAP details'), ('manage_nap_ports', 'Can manage NAP ports'), ('view_nap_availability', 'Can view NAP port availability')],
            },
        ),
        migrations.CreateModel(
            name='Splitter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate (e.g., 8.4542363)', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate (e.g., 124.6318977)', max_digits=11, null=True)),
                ('location_accuracy', models.CharField(blank=True, choices=[('exact', 'Exact GPS'), ('approximate', 'Approximate'), ('address', 'From Address'), ('manual', 'Manual Entry')], default='manual', help_text='How the location was determined', max_length=50)),
                ('location_notes', models.CharField(blank=True, help_text='Additional notes about the location (landmark, building, etc.)', max_length=255)),
                ('code', models.CharField(help_text='Splitter identifier (e.g., SP-001)', max_length=50)),
                ('type', models.CharField(choices=[('1:4', '1:4 (4 ports)'), ('1:8', '1:8 (8 ports)'), ('1:16', '1:16 (16 ports)'), ('1:32', '1:32 (32 ports)'), ('1:64', '1:64 (64 ports)')], help_text='Splitter ratio', max_length=20)),
                ('location', models.CharField(blank=True, help_text='Specific location within LCP or elsewhere', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['lcp', 'code'],
                'permissions': [('view_splitter_list', 'Can view splitter list'), ('view_splitter_detail', 'Can view splitter details'), ('manage_splitter_ports', 'Can manage splitter ports')],
            },
        ),
        migrations.CreateModel(
            name='LCP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate (e.g., 8.4542363)', max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate (e.g., 124.6318977)', max_digits=11, null=True)),
                ('location_accuracy', models.CharField(blank=True, choices=[('exact', 'Exact GPS'), ('approximate', 'Approximate'), ('address', 'From Address'), ('manual', 'Manual Entry')], default='manual', help_text='How the location was determined', max_length=50)),
                ('location_notes', models.CharField(blank=True, help_text='Additional notes about the location (landmark, building, etc.)', max_length=255)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text='Unique identifier (e.g., LCP-001)', max_length=50)),
                ('location', models.TextField(help_text='Physical address or description')),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('coverage_radius_meters', models.IntegerField(default=1000, help_text='Approximate coverage area radius in meters')),
                ('barangay', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lcps', to='barangays.barangay')),
            ],
            options={
                'verbose_name': 'LCP',
                'verbose_name_plural': 'LCPs',
                'ordering': ['code'],
                'permissions': [('view_lcp_list', 'Can view LCP list'), ('view_lcp_detail', 'Can view LCP details'), ('manage_lcp_infrastructure', 'Can manage LCP infrastructure'), ('view_lcp_map', 'Can view LCP on map'), ('export_lcp_data', 'Can export LCP data')],
            },
        ),
    ]
