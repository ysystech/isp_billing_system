# Generated by Django 5.2.2 on 2025-07-01 13:31

from django.db import migrations, models


def migrate_existing_models(apps, schema_editor):
    """Convert existing model values to 'other' if they don't match new choices"""
    Router = apps.get_model('routers', 'Router')
    
    valid_models = [
        'TP-Link Archer C6',
        'TP-Link Archer C60',
        'TP-Link Archer C64',
        'TP-Link Archer C80',
        'TP-Link Archer AX10',
        'TP-Link Archer AX23',
        'Mikrotik hAP ac2',
        'Mikrotik hAP ac3',
        'Mikrotik hAP ax2',
        'Mikrotik hAP ax3',
        'Mikrotik hEX',
        'Mikrotik hEX S',
        'Ubiquiti Dream Router',
        'Ubiquiti AmpliFi HD',
        'Ubiquiti EdgeRouter X',
        'Ubiquiti UniFi Dream Machine',
        'Tenda AC10',
        'Tenda AC23',
        'Tenda TX3',
        'Huawei AX3',
        'Huawei AX2',
        'Huawei WS5200',
        'other',
    ]
    
    for router in Router.objects.all():
        if router.model and router.model not in valid_models:
            # Save the original model in notes if notes are empty
            if not router.notes:
                router.notes = f"Original model: {router.model}"
            else:
                router.notes = f"{router.notes}\nOriginal model: {router.model}"
            
            router.model = 'other'
            router.save()


def reverse_migration(apps, schema_editor):
    """This migration is not reversible"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('routers', '0002_initial'),
    ]

    operations = [
        # First, run the data migration to convert existing values
        migrations.RunPython(migrate_existing_models, reverse_migration),
        
        # Then alter the field to use choices
        migrations.AlterField(
            model_name='router',
            name='model',
            field=models.CharField(choices=[('TP-Link Archer C6', 'TP-Link Archer C6 AC1200'), ('TP-Link Archer C60', 'TP-Link Archer C60 AC1350'), ('TP-Link Archer C64', 'TP-Link Archer C64 AC1200'), ('TP-Link Archer C80', 'TP-Link Archer C80 AC1900'), ('TP-Link Archer AX10', 'TP-Link Archer AX10 AX1500 Wi-Fi 6'), ('TP-Link Archer AX23', 'TP-Link Archer AX23 AX1800 Wi-Fi 6'), ('Mikrotik hAP ac2', 'Mikrotik hAP ac2 (RBD52G-5HacD2HnD-TC)'), ('Mikrotik hAP ac3', 'Mikrotik hAP ac3 (RBD53iG-5HacD2HnD)'), ('Mikrotik hAP ax2', 'Mikrotik hAP ax2 (C52iG-5HaxD2HaxD-TC)'), ('Mikrotik hAP ax3', 'Mikrotik hAP ax3 (C53UiG+5HPaxD2HPaxD)'), ('Mikrotik hEX', 'Mikrotik hEX (RB750Gr3)'), ('Mikrotik hEX S', 'Mikrotik hEX S (RB760iGS)'), ('Ubiquiti Dream Router', 'Ubiquiti Dream Router'), ('Ubiquiti AmpliFi HD', 'Ubiquiti AmpliFi HD Router'), ('Ubiquiti EdgeRouter X', 'Ubiquiti EdgeRouter X'), ('Ubiquiti UniFi Dream Machine', 'Ubiquiti UniFi Dream Machine'), ('Tenda AC10', 'Tenda AC10 AC1200'), ('Tenda AC23', 'Tenda AC23 AC2100'), ('Tenda TX3', 'Tenda TX3 AX1800 Wi-Fi 6'), ('Huawei AX3', 'Huawei WiFi AX3 (AX3000)'), ('Huawei AX2', 'Huawei WiFi AX2 (AX1500)'), ('Huawei WS5200', 'Huawei WS5200 AC1200'), ('other', 'Other (Specify in notes)')], help_text='Router model', max_length=100),
        ),
    ]
