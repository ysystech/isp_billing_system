# Generated by Django 5.2.2 on 2025-06-29

from django.db import migrations
import random


def generate_mac_address():
    """Generate a random MAC address"""
    # Using a common OUI (Organizationally Unique Identifier) prefix
    # Using TP-Link's OUI as an example: 50:C7:BF
    mac = [0x50, 0xC7, 0xBF,
           random.randint(0x00, 0xff),
           random.randint(0x00, 0xff),
           random.randint(0x00, 0xff)]
    return ':'.join(f'{byte:02X}' for byte in mac)


def populate_mac_addresses(apps, schema_editor):
    """Populate MAC addresses for routers that don't have one"""
    Router = apps.get_model('routers', 'Router')
    
    routers_without_mac = Router.objects.filter(mac_address__isnull=True) | Router.objects.filter(mac_address='')
    
    updated_count = 0
    for router in routers_without_mac:
        # Generate a unique MAC address
        while True:
            mac = generate_mac_address()
            # Check if this MAC already exists
            if not Router.objects.filter(mac_address=mac).exists():
                break
        
        router.mac_address = mac
        router.save()
        updated_count += 1
        print(f"Updated router {router.id} ({router.brand} {router.model}) with MAC: {mac}")
    
    print(f"Total routers updated: {updated_count}")


def reverse_populate_mac_addresses(apps, schema_editor):
    """We can't really reverse this operation, so we'll just pass"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('routers', '0005_alter_router_options'),
    ]

    operations = [
        migrations.RunPython(populate_mac_addresses, reverse_populate_mac_addresses),
    ]
